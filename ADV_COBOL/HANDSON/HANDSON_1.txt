===============================================
FILE HANDLING SEQUENTIAL
===============================================

(1)

IDENTIFICATION DIVISION.
PROGRAM-ID. FHAND1.
ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
SELECT OUTFILE ASSIGN TO DD1
ORGANIZATION IS SEQUENTIAL
ACCESS MODE IS SEQUENTIAL
FILE STATUS IS WS-FS1.
DATA DIVISION.
FILE SECTION.
FD OUTFILE.
 01 OUT-REC.
    02 I-EMPNO PIC X(3).
    02 FILLER PIC X.
    02 I-EMPNAME PIC X(6).
    02 FILLER PIC X.
    02 I-EMPDEPT PIC X(2).
    02 FILLER PIC X.
    02 I-EMPSAL PIC X(4).
    02 FILLER PIC X(62).
WORKING-STORAGE SECTION.
 77 WS-FS1 PIC 9(2).
   01 INP-DATA.
   02 EMP-NO PIC X(3).
   02 FILLER PIC X.
   02 EMP-NAME PIC X(6).
   02 FILLER PIC X.
   02 EMP-DEPT PIC X(2).
   02 FILLER PIC X.
   02 EMPSAL PIC X(4).
PROCEDURE DIVISION.
MAIN-PARA.
PERFORM OPEN-PARA.
PERFORM WRITE-PARA.
PERFORM CLOSE-PARA.
STOP RUN.
OPEN-PARA.
OPEN EXTEND OUTFILE.
IF WS-FS1 = 00
   DISPLAY “DATA WRITTEN SUCCESSFULLY.”
ELSE
   DISPLAY “ERROR IN WRITING THE FILE.”
END-IF.
WRITE-PARA.
ACCEPT INP-DATA.
MOVE INP-DATA TO OUT-REC
WRITE OUT-REC
END-WRITE.
CLOSE-PARA.
CLOSE OUTFILE.


(2)

IDENTIFICATION DIVISION.
PROGRAM-ID. FHAND1.
ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
SELECT INFILE ASSIGN TO DD1
ORGANIZATION IS SEQUENTIAL
ACCESS MODE IS SEQUENTIAL
FILE STATUS IS WS-FS1.
DATA DIVISION.
FILE SECTION.
FD INFILE.
 01 IN-REC.
    02 I-EMPNO PIC X(3).
    02 I-EMPNAME PIC X(6).
    02 I-EMPDEPT PIC X(2).
    02 I-EMPSAL PIC X(4).
    02 FILLER PIC X(65).
WORKING-STORAGE SECTION.
77 WS-FS1 PIC 9(2).
77 WS-FLAG PIC X(1) VALUE ‘Y’.
PROCEDURE DIVISION.
MAIN-PARA.
PERFORM OPEN-PARA.
PERFORM READ-PARA UNTIL WS-FLAG = ‘N’.
PERFORM CLOSE-PARA.
STOP RUN.
OPEN-PARA.
OPEN INPUT INFILE.
IF WS-FS1 = 00
DISPLAY “FILE OPENED SUCCESSFULLY.”
ELSE
DISPLAY “ERROR IN OPENING THE FILE.”
END-IF.
READ-PARA.
READ INFILE
AT END
DISPLAY “END OF THE FILE.”
MOVE ‘N’ TO WS-FLAG
NOT AT END DISPLAY IN-REC
END-READ.
CLOSE-PARA.
CLOSE INFILE.


(3)

IDENTIFICATION DIVISION.
PROGRAM-ID. FHAND1.
ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
SELECT OUTFILE ASSIGN TO DD1
ORGANIZATION IS SEQUENTIAL
ACCESS MODE IS SEQUENTIAL
FILE STATUS IS WS-FS1.
DATA DIVISION.
FILE SECTION.
FD OUTFILE.
 01 OUT-REC.
   02 O-EMPNO PIC X(3).
   02 FILLER PIC X.
   02 O-EMPNAME PIC X(6).
   02 FILLER PIC X.
   02 O-EMPDEPT PIC X(2).
   02 FILLER PIC X.
   02 O-EMPLOC PIC X(7).
   02 FILLER PIC X.
   02 O-EMPSAL PIC 9(4).
   02 FILLER PIC X(54).
WORKING-STORAGE SECTION.
 77 WS-FS1 PIC 9(2).
 77 WS-FLAG PIC X(1) VALUE ‘Y’.
 77 TEMP-SAL PIC 9(4).
PROCEDURE DIVISION.
MAIN-PARA.
PERFORM OPEN-PARA.
PERFORM UPDATE-PARA UNTIL WS-FLAG = ‘N’.
PERFORM CLOSE-PARA.
STOP RUN.
OPEN-PARA.
OPEN I-O OUTFILE.
IF WS-FS1 = 00
   DISPLAY “FILE OPENED SUCCESSFULLY!”
ELSE
   DISPLAY “ERROR IN OPENING THE FILE!” WS-FS1
END-IF.
UPDATE-PARA.
READ OUTFILE
AT END
   DISPLAY “END OF FILE!”
MOVE ‘N’ TO WS-FLAG
NOT AT END
IF O-EMPLOC = ‘PUNE’
   COMPUTE TEMP-SAL = O-EMPSAL + 1000
DISPLAY TEMP-SAL
MOVE TEMP-SAL TO O-EMPSAL
END-IF
REWRITE OUT-REC
END-READ.
CLOSE-PARA.
CLOSE OUTFILE.

===============================================
COPY BOOK
===============================================

(1)

IDENTIFICATION DIVISION.
PROGRAM-ID. COPYPS.
ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
SELECT INFILE ASSIGN TO DD1
ORGANIZATION IS SEQUENTIAL
ACCESS MODE IS SEQUENTIAL
FILE STATUS IS WS-FS1.
DATA DIVISION.
FILE SECTION.
FD INFILE.
COPY READPS.
WORKING-STORAGE SECTION.
77 WS-FS1 PIC 9(2).
77 WS-FLAG PIC X(1) VALUE ‘Y’.
PROCEDURE DIVISION.
MAIN-PARA.
PERFORM OPEN-PARA.
PERFORM READ-PARA UNTIL WS-FLAG = ‘N’.
PERFORM CLOSE-PARA.
STOP RUN.
OPEN-PARA.
OPEN INPUT INFILE.
IF WS-FS1 = 00
DISPLAY “FILE OPENED SUCCESSFULLY!”
ELSE
DISPLAY “ERROR IN OPENING THE FILE!”
END-IF.
READ-PARA.
READ INFILE
AT END
DISPLAY “END OF FILE!”
MOVE ‘N’ TO WS-FLAG
NOT AT END DISPLAY IN-REC
END-READ.
CLOSE-PARA.
CLOSE INFILE.

===============================================
SIMPLE SORT
===============================================

(1)

IDENTIFICATION DIVISION.
PROGRAM-ID. SORT.
ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
SELECT INFILE ASSIGN TO DD1.
SELECT WRKFILE ASSIGN TO DD2.
SELECT OUTFILE ASSIGN TO DD3.
DATA DIVISION.
FILE SECTION.
FD INFILE.
COPY CPRG4 REPLACING ==:XXX:== BY ==I==.
SD WRKFILE.
COPY CPRG4 REPLACING ==:XXX:== BY ==W==.
FD OUTFILE.
COPY CPRG4 REPLACING ==:XXX:== BY ==O==.
WORKING-STORAGE SECTION.
PROCEDURE DIVISION.
MAIN-PARA.
PERFORM UPDATE-PARA.
UPDATE-PARA.
SORT WRKFILE
ON ASCENDING W-EMPSAL
USING INFILE
GIVING OUTFILE
STOP RUN.

===============================================
COMPLEX SORT
===============================================

(1)

IDENTIFICATION DIVISION.
PROGRAM-ID. SALSORT.
ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
SELECT INFILE ASSIGN TO DD1.
SELECT WRKFILE ASSIGN TO DD2.
SELECT OUTFILE ASSIGN TO DD3.
DATA DIVISION.
FILE SECTION.
FD INFILE.
COPY CPRG6 REPLACING ==:XXX:== BY ==I==.
SD WRKFILE.
COPY CPRG6 REPLACING ==:XXX:== BY ==W==.
FD OUTFILE.
COPY CPRG6 REPLACING ==:XXX:== BY ==O==.
WORKING-STORAGE SECTION.
77 EOF PIC X(1) VALUE ‘Y’.
PROCEDURE DIVISION.
MAIN-PARA.
SORT WRKFILE
ON ASCENDING W-EMPNO
INPUT PROCEDURE INP-PARA
GIVING OUTFILE.
STOP RUN.
INP-PARA.
OPEN INPUT INFILE.
PERFORM UNTIL ( EOF = ‘N’ )
READ INFILE
AT END
DISPLAY “END OF FILE!”
MOVE ‘N’ TO EOF
NOT AT END
IF I-LOANBAL > ( I-LOAN / 2)
RELEASE W-REC FROM I-REC
END-IF
END-READ
END-PERFORM.


(2)

IDENTIFICATION DIVISION.
PROGRAM-ID. TEST.
ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
SELECT INFILE ASSIGN TO DD1.
SELECT WRKFILE ASSIGN TO DD2.
SELECT OUTFILE ASSIGN TO DD3.
DATA DIVISION.
FILE SECTION.
FD INFILE.
COPY CPRG7 REPLACING ==:XXX:== BY ==I==.
SD WRKFILE.
COPY CPRG7 REPLACING ==:XXX:== BY ==W==.
FD OUTFILE.
COPY CPRG7 REPLACING ==:XXX:== BY ==O==.
WORKING-STORAGE SECTION.
77 EOF PIC X(1) VALUE ‘Y’.
PROCEDURE DIVISION.
MAIN-PARA.
SORT WRKFILE
ON ASCENDING W-AVG
USING INFILE
OUTPUT PROCEDURE OUT-PARA.
STOP RUN.
OUT-PARA.
OPEN OUTPUT OUTFILE.
PERFORM UNTIL ( EOF = ‘N’ )
RETURN WRKFILE INTO O-REC
AT END
DISPLAY “END OF FILE!”
MOVE ‘N’ TO EOF
CLOSE OUTFILE
NOT AT END
DISPLAY ‘O-TEST1’ O-TEST1
DISPLAY ‘O-AVG ‘ O-AVG
IF O-TEST1 >= O-AVG
WRITE O-REC
END-IF
END-RETURN
END-PERFORM.


(3)

IDENTIFICATION DIVISION.
PROGRAM-ID. IOSORT.
ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
SELECT INFILE ASSIGN TO DD1.
SELECT WRKFILE ASSIGN TO DD2.
SELECT OUTFILE ASSIGN TO DD3.
DATA DIVISION.
FILE SECTION.
FD INFILE.
COPY CPRG5 REPLACING ==:XXX:== BY ==I==.
SD WRKFILE.
COPY CPRG5 REPLACING ==:XXX:== BY ==W==.
FD OUTFILE.
COPY CPRG5 REPLACING ==:XXX:== BY ==O==.
WORKING-STORAGE SECTION.
77 EOF1 PIC X(1) VALUE ‘Y’.
77 EOF2 PIC X(1) VALUE ‘Y’.
PROCEDURE DIVISION.
MAIN-PARA.
SORT WRKFILE
ON ASCENDING W-EMPNO
INPUT PROCEDURE INP-PARA
OUTPUT PROCEDURE OUT-PARA.
STOP RUN.
INP-PARA.
OPEN INPUT INFILE.
PERFORM UNTIL ( EOF1 = ‘N’ )
READ INFILE
AT END
DISPLAY “END OF FILE!”
MOVE ‘N’ TO EOF1
NOT AT END
IF I-EMPDEPT = 10
DISPLAY “I-EMPDEPT” I-EMPDEPT
RELEASE W-REC FROM I-REC
END-IF
END-READ
END-PERFORM.
OUT-PARA.
OPEN OUTPUT OUTFILE.
PERFORM UNTIL ( EOF2 = ‘N’ )
RETURN WRKFILE INTO O-REC
AT END
DISPLAY “END OF FILE!”
MOVE ‘N’ TO EOF2
CLOSE OUTFILE
NOT AT END
IF O-EMPSAL > 3000
DISPLAY “O-EMPSAL” O-EMPSAL
WRITE O-REC
END-IF
END-RETURN
END-PERFORM.


===============================================
STRING HANDLING
===============================================

(1)

IDENTIFICATION DIVISION.
PROGRAM-ID. NAME.
ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
DATA DIVISION.
FILE SECTION.
WORKING-STORAGE SECTION.
01 NAME.
 10 FIRST-NAME PIC X(10).
 10 MIDDLE-NAME PIC X(10).
 10 LAST-NAME PIC X(10).
01 FULL-NAME PIC X(33).
PROCEDURE DIVISION.
MAIN-PARA.
PERFORM ACCEPT-PARA.
PERFORM CONCAT-PARA.
PERFORM DISPLAY-PARA.
STOP RUN.
ACCEPT-PARA.
ACCEPT FIRST-NAME.
ACCEPT MIDDLE-NAME.
ACCEPT LAST-NAME.
CONCAT-PARA.
STRING
FIRST-NAME DELIMITED BY SPACE
‘ ‘ DELIMITED BY SIZE
MIDDLE-NAME DELIMITED BY SPACE
‘ ‘ DELIMITED BY SIZE
LAST-NAME DELIMITED BY SPACE
‘ ‘ DELIMITED BY SIZE
INTO FULL-NAME.
DISPLAY-PARA.
DISPLAY “FIRST NAME: ” FIRST-NAME.
DISPLAY “MIDDLE NAME: ” MIDDLE-NAME.
DISPLAY “LAST NAME: ” LAST-NAME.
DISPLAY “============”
DISPLAY “FULL NAME: ” FULL-NAME.


(2)
IDENTIFICATION DIVISION.
PROGRAM-ID. CHAR.
ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
DATA DIVISION.
FILE SECTION.
WORKING-STORAGE SECTION.
01 NAME.
10 FIRST-NAME PIC X(10).
10 MIDDLE-NAME PIC X(10).
10 LAST-NAME PIC X(10).
01 FULL-NAME PIC X(33).
PROCEDURE DIVISION.
MAIN-PARA.
PERFORM ACCEPT-PARA.
PERFORM CONCAT-PARA.
PERFORM DISPLAY-PARA.
STOP RUN.
ACCEPT-PARA.
ACCEPT FULL-NAME.
CONCAT-PARA.
UNSTRING
FULL-NAME DELIMITED BY SPACE
INTO FIRST-NAME MIDDLE-NAME LAST-NAME
END-UNSTRING.
DISPLAY-PARA.
DISPLAY “FULL NAME: ” FULL-NAME.
DISPLAY “============”
DISPLAY “FIRST NAME: ” FIRST-NAME.
DISPLAY “MIDDLE NAME: ” MIDDLE-NAME.
DISPLAY “LAST NAME: ” LAST-NAME.



(3)
IDENTIFICATION DIVISION.
PROGRAM-ID. OCCUR.
ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
DATA DIVISION.
FILE SECTION.
WORKING-STORAGE SECTION.
01 USER-INPUT PIC X(10).
01 CHAR-COUNT PIC 9(2).
PROCEDURE DIVISION.
MAIN-PARA.
PERFORM ACCEPT-PARA.
PERFORM CHANGE-PARA.
PERFORM DISPLAY-PARA.
STOP RUN.
ACCEPT-PARA.
ACCEPT USER-INPUT.
CHANGE-PARA.
INSPECT USER-INPUT TALLYING CHAR-COUNT FOR ALL ‘A’.
DISPLAY-PARA.
DISPLAY “USER INPUT IS: ” USER-INPUT.
DISPLAY “==========================”.
DISPLAY “THE COUNT OF CHARACTER IS: ” CHAR-COUNT.
DISPLAY “==========================”.




(4)

IDENTIFICATION DIVISION.
PROGRAM-ID. REPLACE.
ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
DATA DIVISION.
FILE SECTION.
WORKING-STORAGE SECTION.
01 USER-INPUT PIC X(10).
PROCEDURE DIVISION.
MAIN-PARA.
PERFORM ACCEPT-PARA.
PERFORM DISPLAY-PARA.
PERFORM CHANGE-PARA.
PERFORM DISPLAY-PARA.
STOP RUN.
ACCEPT-PARA.
ACCEPT USER-INPUT.
CHANGE-PARA.
INSPECT USER-INPUT REPLACING ALL ‘A’ BY ‘W’.
DISPLAY-PARA.
DISPLAY “USER INPUT IS: ” USER-INPUT.
DISPLAY “==========================”.




(5)

IDENTIFICATION DIVISION.
PROGRAM-ID. ZERO.
ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
DATA DIVISION.
FILE SECTION.
WORKING-STORAGE SECTION.
01 USER-INPUT PIC X(10).
PROCEDURE DIVISION.
MAIN-PARA.
PERFORM ACCEPT-PARA.
PERFORM CHANGE-PARA.
PERFORM DISPLAY-PARA.
STOP RUN.
ACCEPT-PARA.
ACCEPT USER-INPUT.
CHANGE-PARA.
INSPECT USER-INPUT REPLACING LEADING ZEROES BY ‘ ‘.
DISPLAY-PARA.
DISPLAY USER-INPUT.
DISPLAY “MODIFIED USER INPUT IS: ” USER-INPUT.



(6)

IDENTIFICATION DIVISION.
PROGRAM-ID. REVERSE.
ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
DATA DIVISION.
FILE SECTION.
WORKING-STORAGE SECTION.
01 USER-INPUT PIC X(20).
01 STR-LEN PIC 9(2).
01 NEW-STR PIC X(20).
01 I PIC 9(2).
01 J PIC 9(2) VALUE 1.
PROCEDURE DIVISION.
MAIN-PARA.
PERFORM ACCEPT-PARA.
PERFORM CHANGE-PARA.
PERFORM DISPLAY-PARA.
STOP RUN.
ACCEPT-PARA.
ACCEPT USER-INPUT.
CHANGE-PARA.
INSPECT USER-INPUT TALLYING STR-LEN FOR CHARACTERS
BEFORE ‘ ‘.
PERFORM VARYING I FROM STR-LEN BY -1 UNTIL I = 0
MOVE USER-INPUT(I:1) TO NEW-STR(J:1)
COMPUTE J = J + 1
END-PERFORM.
DISPLAY-PARA.
DISPLAY “THE STR-LEN IS: ” STR-LEN.
DISPLAY NEW-STR.






===============================================
INTER PROGRAM COMMUNICATION
===============================================

(1)

MAIN PROGRAM:

IDENTIFICATION DIVISION.
PROGRAM-ID. PROG1.
ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
DATA DIVISION.
FILE SECTION.
WORKING-STORAGE SECTION.
77 NUM1 PIC 9(3) VALUE 100.
77 NUM2 PIC 9(3) VALUE 200.
77 TOTAL PIC 9(4).
PROCEDURE DIVISION.
CALL ‘SUB1’ USING NUM1, NUM2, TOTAL.
DISPLAY “NUM 1: ” NUM1.
DISPLAY “NUM 2: ” NUM2.
DISPLAY “TOTAL: ” TOTAL.
STOP RUN.


SUB-PROGRAM:

IDENTIFICATION DIVISION.
PROGRAM-ID. SUBPROG.
ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
DATA DIVISION.
LINKAGE SECTION.
77 SUB-NUM1 PIC 9(3) VALUE 100.
77 SUB-NUM2 PIC 9(3) VALUE 200.
77 SUB-TOTAL PIC 9(4).
PROCEDURE DIVISION USING SUB-NUM1, SUB-NUM2, SUB-TOTAL.
COMPUTE SUB-TOTAL = SUB-NUM1 + SUB-NUM2.
EXIT PROGRAM.


(2)

MAIN PROGRAM:


IDENTIFICATION DIVISION.
PROGRAM-ID. PROG2.
ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
DATA DIVISION.
FILE SECTION.
WORKING-STORAGE SECTION.
77 NUM1 PIC 9(3) VALUE 100.
77 NUM2 PIC 9(3) VALUE 200.
77 TOTAL PIC 9(4).
PROCEDURE DIVISION.
CALL ‘SUB2’ USING BY CONTENT NUM1, BY CONTENT NUM2,
BY CONTENT TOTAL.
DISPLAY “NUM 1: ” NUM1.
DISPLAY “NUM 2: ” NUM2.
DISPLAY “TOTAL: ” TOTAL.
STOP RUN.


SUB-PROGRAM:


IDENTIFICATION DIVISION.
PROGRAM-ID. SUBPRO.
ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
DATA DIVISION.
LINKAGE SECTION.
77 SUB-NUM1 PIC 9(3) VALUE 100.
77 SUB-NUM2 PIC 9(3) VALUE 200.
77 SUB-TOTAL PIC 9(4).
PROCEDURE DIVISION USING SUB-NUM1, SUB-NUM2, SUB-TOTAL.
COMPUTE SUB-TOTAL = SUB-NUM1 + SUB-NUM2.
DISPLAY “NUM 1: ” SUB-NUM1.
DISPLAY “NUM 2: ” SUB-NUM2.
DISPLAY “TOTAL: ” SUB-TOTAL.
DISPLAY “TOTAL: ” SUB-TOTAL.
EXIT PROGRAM.


